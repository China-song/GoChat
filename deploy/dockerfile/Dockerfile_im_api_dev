FROM alpine:3.18

# 添加时区处理
RUN echo -e "https://mirrors.aliyun.com/alpine/v3.15/main\nhttps://mirrors.aliyun.com/alpine/v3.15/community" > /etc/apk/repositories && \
    apk update &&\
    apk --no-cache add tzdata && \
    cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && \
    echo "Asia/Shanghai" >  /etc/timezone
ENV TZ=Asia/Shanghai

# 声明属性 只在Dockerfile中生效
ARG SERVICE_NAME=im
ARG SERVICE_TYPE=api

ENV RUN_BIN bin/${SERVICE_NAME}-${SERVICE_TYPE}
ENV RUN_CONF /${SERVICE_NAME}/conf/${SERVICE_NAME}.yaml

# 这个关键词的意思是复制的意思，可以将宿主机中的内容复制到容器中
# 命令 左边是宿主机的目录，右边是容器目录
RUN mkdir /$SERVICE_NAME && mkdir /$SERVICE_NAME/bin && mkdir /$SERVICE_NAME/conf

# 复制编译后的二进制文件
COPY ./bin/$SERVICE_NAME-$SERVICE_TYPE /$SERVICE_NAME/bin/

# 复制配置文件
COPY ./apps/$SERVICE_NAME/$SERVICE_TYPE/etc/dev/${SERVICE_NAME}.yaml /$SERVICE_NAME/conf/

# 为二进制提供执行权限
RUN chmod +x /$SERVICE_NAME/bin/$SERVICE_NAME-$SERVICE_TYPE

# 该命令指定容器会默认进入那个目录，如我们每次进入服务器的时候会自动进入root目录一样的作用
WORKDIR /$SERVICE_NAME

# 这个命令可以让我们的docker容器在启动的时候就执行下面的命令
# 与CMD不同之处是，在docker run 后跟的命令不能替换它，它仍然会启动的时候执行
# ENTRYPOINT ["$RUN_BIN", "-f", "$RUN_CONF"] // 这种写法不支持对环境变量的解析，
#您正在使用ENTRYPOINT 的exec形式。与shell表单不同，exec表单不会调用命令shell。这意味着正常的外壳处理不会发生。例如，ENTRYPOINT [ "echo", "$HOME" ]
# 将不会在$ HOME上进行变量替换。如果要进行shell处理，则可以使用shell形式或直接执行shell，例如：ENTRYPOINT [ "sh", "-c", "echo $HOME" ]。
#当使用exec表单并直接执行shell时（例如在shell表单中），是由shell进行环境变量扩展，而不是docker。（来自Dockerfile参考）
#

ENTRYPOINT $RUN_BIN -f $RUN_CONF